## My kakoune config
# * depends on binaries from this repo (../../dm-tools)
# * use at your own risk

## Hide release notes from latest version
# Bump the number when you've read them!
set-option global startup_info_version 20190120

## LSP
eval %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable
set-option global lsp_server_configuration pyls.plugins.jedi_completion.include_params=false
map global user l ':enter-user-mode lsp<ret>' -docstring 'enter lsp user mode'
map global lsp n ':lsp-find-error --include-warnings<ret>' -docstring 'find next warning or error'

## EditorConfig support
# .editorconfig file should exist somewhere
# `editorconfig` binary should exist
hook global BufCreate .* %{editorconfig-load}

## Formatting

# Go: use goimports
hook global BufWritePre .*\.go "go-format -use-goimports"

# Python: use lsp-format (that way it only runs when pyls-black is installed
# in the activated virtual environment)
hook global BufWritePre .*\.py lsp-formatting

hook global WinSetOption filetype=rust %{
  set window formatcmd 'rustfmt'
}
hook global WinSetOption filetype=javascript %{
  set window formatcmd 'yarn eslint --fix'
}

# On save:
hook global BufWritePre .*\.(rs|js) format


## UI options
eval %sh{
    if [ "$(uname)" = "Darwin" ]; then
     echo "colorscheme default"
   else
     echo "colorscheme desertex"
  fi
}
add-highlighter global/ wrap -word
set-option global ui_options 'ncurses_assistant=cat'

# Use only gutter signs for LSP diagnostics,
# but keep the color in the rest of the line as-is
unset-face global DiagnosticWarning
unset-face global DiagnosticError
set-face global LineFlagErrors green+bi
set-option global lsp_diagnostic_line_warning_sign !
set-option global lsp_diagnostic_line_error_sign  ✘

# Status line
set-option global modelinefmt '%opt{lsp_diagnostic_error_count}✘  %opt{lsp_diagnostic_warning_count}! %val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]'


## Plugins customisation
set-option global grepcmd 'rg --no-heading --line-number --column --sort path'


## Working dir stuff
declare-option str project_working_dir %sh{ pwd }
map global user c ':enter-user-mode cd<ret>' -docstring 'enter cd user mode'
map global cd c ':change-directory %val{opt_project_working_dir}<ret>' -docstring 'reset working directory'
map global cd o ':evaluate-commands %sh{ cwd-history list --kakoune }<ret>' -docstring 'open old working directory'


## Spell check
declare-user-mode spell
map global user s ':enter-user-mode spell<ret>' -docstring 'enter spell user mode'

map global spell c '<esc>:spell-clear<ret>' -docstring 'clear spelling highlighters'
map global spell e '<esc>:spell-enable en<ret>' -docstring 'run spell check in English'
map global spell f '<esc>:spell-enable fr<ret>' -docstring 'run spell check in French'
map global spell n '<esc>:spell-next<ret>' -docstring 'go to next spell error'
map global spell r '<esc>:spell-replace<ret>' -docstring 'suggest a list of replacements'

## Custom commands
define-command show-line-numbers -docstring "show line numbers" \
  "add-highlighter buffer/ number-lines"
define-command hide-line-numbers  -docstring "hide line numbers" \
  "remove-highlighter buffer/number-lines"
define-command disable-markdown-highlighters  -docstring "disable markdown highlighters" \
  "remove-highlighter shared/markdown"


## Custom mappings
map global user m ':write-all<ret> :make<ret>' -docstring 'run make'
map global user f ':find ' -docstring 'run find'
map global user g ':grep ' -docstring 'run grep'
map global user b ':set-option buffer filetype ' -docstring 'set filetype for the current buffer'
set-option global autowrap_column 80
map global normal = '|fmt -w $kak_opt_autowrap_column<ret>'

# Yeah, I know waq is the default alias, but come on, can't you make
# an exception and keep the vim stuff working ?
alias global wqa write-all-quit
alias global pwd print-working-directory
define-command cq 'quit! 2' -docstring "force quit with non-zero exit code"


## Copy/pasting
hook global NormalKey y %{ nop %sh{
  if [ "$(uname)" = "Darwin" ]; then
    printf %s "$kak_main_reg_dquote" | pbcopy
  else
    printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
  fi
}}

map global user P '!system-clipboard-paste<ret>'  -docstring 'yank from system clipboard after selection'
map global user p '<a-!>system-clipboard-paste<ret>' -docstring 'yank from system clipboard before selection'


## Persistent file and working dirs history
# (forgive me, mawwww, but persisting state is cool sometimes)
hook global BufOpenFile .* %{ nop %sh{ mru-files add  "${kak_hook_param}" } }
map global user o ':evaluate-commands %sh{ mru-files list --kakoune }<ret>' -docstring 'open old files'


## Whitespace cleaning
# * Clean trailing whitespace
define-command cleanup-whitespace %{
    try %{ execute-keys -draft \% s \h+$ <ret> d }
}
hook global BufWritePre .* cleanup-whitespace

## jj is escape
hook global InsertChar j %{ try %{
  exec -draft hH <a-k>jj<ret> d
  exec <esc>
}}
